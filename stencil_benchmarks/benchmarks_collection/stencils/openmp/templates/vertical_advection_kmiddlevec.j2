{% extends "vertical_advection_kmiddle.j2" %}

{% block pre_kernel %}
{{ super() }}

__attribute__((always_inline)) inline void forward_sweep_kmin_vec(index_t i,
    const index_t j,
    const index_t ishift,
    const index_t jshift,
    {{ ctype }} *__restrict__ ccol,
    {{ ctype }} *__restrict__ dcol,
    const {{ ctype }} *__restrict__ wcon,
    const {{ ctype }} *__restrict__ ustage,
    const {{ ctype }} *__restrict__ upos,
    const {{ ctype }} *__restrict__ utens,
    const {{ ctype }} *__restrict__ utensstage) {

    const index_t k = 0;
    const index_t index = i * {{ strides[0] }} + j * {{ strides[1] }} + k * {{ strides[2] }};

    vec_t gcv = {{ ctype }}(0.25) *
                        (loadu(&wcon[index + ishift * {{ strides[0] }} + jshift * {{ strides[1] }} + {{ strides[2] }}]) + load(&wcon[index + {{ strides[2] }}]));
    vec_t cs = gcv * bet_m;

    store(&ccol[index], gcv * bet_p);
    vec_t bcol = dtr_stage - load(&ccol[index]);

    vec_t correction_term = -cs * (load(&ustage[index + {{ strides[2] }}]) - load(&ustage[index]));
    store(&dcol[index], dtr_stage * load(&upos[index]) + load(&utens[index]) + load(&utensstage[index]) + correction_term);

    vec_t divided = {{ ctype }}(1.0) / bcol;
    store(&ccol[index], load(&ccol[index]) * divided);
    store(&dcol[index], load(&dcol[index]) * divided);
}

__attribute__((always_inline)) inline void forward_sweep_kbody_vec(index_t i,
    const index_t j,
    const index_t k,
    const index_t ishift,
    const index_t jshift,
    {{ ctype }} *__restrict__ ccol,
    {{ ctype }} *__restrict__ dcol,
    const {{ ctype }} *__restrict__ wcon,
    const {{ ctype }} *__restrict__ ustage,
    const {{ ctype }} *__restrict__ upos,
    const {{ ctype }} *__restrict__ utens,
    const {{ ctype }} *__restrict__ utensstage) {

    const index_t index = i * {{ strides[0] }} + j * {{ strides[1] }} + k * {{ strides[2] }};
    vec_t gav = {{ ctype }}(-0.25) * (loadu(&wcon[index + ishift * {{ strides[0] }} + jshift * {{ strides[1] }}]) + load(&wcon[index]));
    vec_t gcv = {{ ctype }}(0.25) *
                        (loadu(&wcon[index + ishift * {{ strides[0] }} + jshift * {{ strides[1] }} + {{ strides[2] }}]) + load(&wcon[index + {{ strides[2] }}]));

    vec_t as = gav * bet_m;
    vec_t cs = gcv * bet_m;

    vec_t acol = gav * bet_p;
    store(&ccol[index], gcv * bet_p);
    vec_t bcol = dtr_stage - acol - load(&ccol[index]);

    vec_t correction_term =
        -as * (load(&ustage[index - {{ strides[2] }}]) - load(&ustage[index])) - cs * (load(&ustage[index + {{ strides[2] }}]) - load(&ustage[index]));
    store(&dcol[index], dtr_stage * load(&upos[index]) + load(&utens[index]) + load(&utensstage[index]) + correction_term);

    vec_t divided = {{ ctype }}(1.0) / (bcol - load(&ccol[index - {{ strides[2] }}]) * acol);
    store(&ccol[index], load(&ccol[index]) * divided);
    store(&dcol[index], (load(&dcol[index]) - load(&dcol[index - {{ strides[2] }}]) * acol) * divided);
}

__attribute__((always_inline)) inline void forward_sweep_kmax_vec(index_t i,
    const index_t j,
    const index_t ishift,
    const index_t jshift,
    {{ ctype }} *__restrict__ ccol,
    {{ ctype }} *__restrict__ dcol,
    const {{ ctype }} *__restrict__ wcon,
    const {{ ctype }} *__restrict__ ustage,
    const {{ ctype }} *__restrict__ upos,
    const {{ ctype }} *__restrict__ utens,
    const {{ ctype }} *__restrict__ utensstage) {

    const index_t k = {{ domain[2] }} - 1;
    const index_t index = i * {{ strides[0] }} + j * {{ strides[1] }} + k * {{ strides[2] }};
    vec_t gav = {{ ctype }}(-0.25) * (loadu(&wcon[index + ishift * {{ strides[0] }} + jshift * {{ strides[1] }}]) + load(&wcon[index]));

    vec_t as = gav * bet_m;

    vec_t acol = gav * bet_p;
    vec_t bcol = dtr_stage - acol;

    vec_t correction_term = -as * (load(&ustage[index - {{ strides[2] }}]) - load(&ustage[index]));
    store(&dcol[index], dtr_stage * load(&upos[index]) + load(&utens[index]) + load(&utensstage[index]) + correction_term);

    vec_t divided = {{ ctype }}(1.0) / (bcol - load(&ccol[index - {{ strides[2] }}]) * acol);
    store(&dcol[index], (load(&dcol[index]) - load(&dcol[index - {{ strides[2] }}]) * acol) * divided);
}

__attribute__((always_inline)) inline void forward_sweep_k_vec(index_t i,
    const index_t j,
    const index_t k,
    const index_t ishift,
    const index_t jshift,
    {{ ctype }} *__restrict__ ccol,
    {{ ctype }} *__restrict__ dcol,
    const {{ ctype }} *__restrict__ wcon,
    const {{ ctype }} *__restrict__ ustage,
    const {{ ctype }} *__restrict__ upos,
    const {{ ctype }} *__restrict__ utens,
    const {{ ctype }} *__restrict__ utensstage) {

    if (k == 0) {
        forward_sweep_kmin_vec(i,
            j,
            ishift,
            jshift,
            ccol,
            dcol,
            wcon,
            ustage,
            upos,
            utens,
            utensstage);
    } else if (k == {{ domain[2] }} - 1) {
        forward_sweep_kmax_vec(i,
            j,
            ishift,
            jshift,
            ccol,
            dcol,
            wcon,
            ustage,
            upos,
            utens,
            utensstage);
    } else {
        forward_sweep_kbody_vec(i,
            j,
            k,
            ishift,
            jshift,
            ccol,
            dcol,
            wcon,
            ustage,
            upos,
            utens,
            utensstage);
    }
}


__attribute__((always_inline)) inline void backward_sweep_kmax_vec(index_t i,
    const index_t j,
    const {{ ctype }} *__restrict__ ccol,
    const {{ ctype }} *__restrict__ dcol,
    {{ ctype }} *__restrict__ datacol,
    const {{ ctype }} *__restrict__ upos,
    {{ ctype }} *__restrict__ utensstage) {

    const index_t k = {{ domain[2] }} - 1;
    const index_t index = i * {{ strides[0] }} + j * {{ strides[1] }} + k * {{ strides[2] }};
    const index_t datacol_index = i * {{ strides[0] }} + j * {{ strides[1] }};
    store(&datacol[datacol_index], load(&dcol[index]));
    storent(&utensstage[index], dtr_stage * (load(&datacol[datacol_index]) - load(&upos[index])));
}

__attribute__((always_inline)) inline void backward_sweep_kbody_vec(index_t i,
    const index_t j,
    const index_t k,
    const {{ ctype }} *__restrict__ ccol,
    const {{ ctype }} *__restrict__ dcol,
    {{ ctype }} *__restrict__ datacol,
    const {{ ctype }} *__restrict__ upos,
    {{ ctype }} *__restrict__ utensstage) {

    const index_t index = i * {{ strides[0] }} + j * {{ strides[1] }} + k * {{ strides[2] }};
    const index_t datacol_index = i * {{ strides[0] }} + j * {{ strides[1] }};
    store(&datacol[datacol_index], load(&dcol[index]) - load(&ccol[index]) * load(&datacol[datacol_index]));
    storent(&utensstage[index], dtr_stage * (load(&datacol[datacol_index]) - load(&upos[index])));
}

__attribute__((always_inline)) inline void backward_sweep_k_vec(index_t i,
    const index_t j,
    const index_t k,
    const {{ ctype }} *__restrict__ ccol,
    const {{ ctype }} *__restrict__ dcol,
    {{ ctype }} *__restrict__ datacol,
    const {{ ctype }} *__restrict__ upos,
    {{ ctype }} *__restrict__ utensstage) {
    if (k == {{ domain[2] }} - 1) {
        backward_sweep_kmax_vec(
            i, j, ccol, dcol, datacol, upos, utensstage);
    } else {
        backward_sweep_kbody_vec(
            i, j, k, ccol, dcol, datacol, upos, utensstage);
    }
}
{% endblock pre_kernel %}

{% block kernel_invoke %}
#pragma omp parallel for collapse(2)
    for (index_t jb = 0; jb < {{ domain[1] }}; jb += {{ block_size[1] }}) {
        for (index_t ib = 0; ib < {{ domain[0] }}; ib += {{ block_size[0] }}) {
            {%- if block_size[1] > 1 %}
                const index_t jmax = std::min((index_t){{ domain[1] }}, jb + {{ block_size[1] }});
                for (index_t j = jb; j < jmax; ++j) {
            {%- else %}
                const index_t j = jb;
                {
            {%- endif %}
                    for (index_t k = 0; k < {{ domain[2] }}; ++k) {
                        const index_t imax = std::min((index_t){{ domain[0] }}, ib + {{ block_size[0] }});
                        index_t i;
                        for (i = ib; i < imax - {{ vector_size - 1 }}; i += {{ vector_size }}) {
                            forward_sweep_k_vec(i, j, k, 1, 0, ccol, dcol, wcon, ustage, upos, utens, utensstage);
                        }
                        for(; i < imax; ++i) {
                            forward_sweep_k(i, j, k, 1, 0, ccol, dcol, wcon, ustage, upos, utens, utensstage);
                        }
                    }
                    for (index_t k = {{ domain[2] }} - 1; k >= 0; --k) {
                        const index_t imax = std::min((index_t){{ domain[0] }}, ib + {{ block_size[0] }});
                        index_t i;
                        for (i = ib; i < imax - {{ vector_size - 1 }}; i += {{ vector_size }}) {
                            backward_sweep_k_vec(i, j, k, ccol, dcol, datacol, upos, utensstage);
                        }
                        for(; i < imax; ++i) {
                            backward_sweep_k(i, j, k, ccol, dcol, datacol, upos, utensstage);
                        }
                    }
                    for (index_t k = 0; k < {{ domain[2] }}; ++k) {
                        const index_t imax = std::min((index_t){{ domain[0] }}, ib + {{ block_size[0] }});
                        index_t i;
                        for (i = ib; i < imax - {{ vector_size - 1 }}; i += {{ vector_size }}) {
                            forward_sweep_k_vec(i, j, k, 0, 1, ccol, dcol, wcon, vstage, vpos, vtens, vtensstage);
                        }
                        for(; i < imax; ++i) {
                            forward_sweep_k(i, j, k, 0, 1, ccol, dcol, wcon, vstage, vpos, vtens, vtensstage);
                        }
                    }
                    for (index_t k = {{ domain[2] }} - 1; k >= 0; --k) {
                        const index_t imax = std::min((index_t){{ domain[0] }}, ib + {{ block_size[0] }});
                        index_t i;
                        for (i = ib; i < imax - {{ vector_size - 1 }}; i += {{ vector_size }}) {
                            backward_sweep_k_vec(i, j, k, ccol, dcol, datacol, vpos, vtensstage);
                        }
                        for(; i < imax; ++i) {
                            backward_sweep_k(i, j, k, ccol, dcol, datacol, vpos, vtensstage);
                        }
                    }
                    for (index_t k = 0; k < {{ domain[2] }}; ++k) {
                        const index_t imax = std::min((index_t){{ domain[0] }}, ib + {{ block_size[0] }});
                        index_t i;
                        for (i = ib; i < imax - {{ vector_size - 1 }}; i += {{ vector_size }}) {
                            forward_sweep_k_vec(i, j, k, 0, 0, ccol, dcol, wcon, wstage, wpos, wtens, wtensstage);
                        }
                        for(; i < imax; ++i) {
                            forward_sweep_k(i, j, k, 0, 0, ccol, dcol, wcon, wstage, wpos, wtens, wtensstage);
                        }
                    }
                    for (index_t k = {{ domain[2] }} - 1; k >= 0; --k) {
                        const index_t imax = std::min((index_t){{ domain[0] }}, ib + {{ block_size[0] }});
                        index_t i;
                        for (i = ib; i < imax - {{ vector_size - 1 }}; i += {{ vector_size }}) {
                            backward_sweep_k_vec(i, j, k, ccol, dcol, datacol, wpos, wtensstage);
                        }
                        for(; i < imax; ++i) {
                            backward_sweep_k(i, j, k, ccol, dcol, datacol, wpos, wtensstage);
                        }
                    }
                }
        }
    }
{% endblock kernel_invoke %}
