{#
Stencil Benchmarks

Copyright (c) 2017-2021, ETH Zurich and MeteoSwiss
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

SPDX-License-Identifier: BSD-3-Clause
#}
{% extends "base.j2" %}

{% block kernel_invoke %}
#pragma omp parallel for collapse(3)
  for (index_t kb = 0; kb < {{ domain[2] }}; kb += {{ block_size[2] }}) {
    for (index_t jb = 0; jb < {{ domain[1] }}; jb += {{ block_size[1] }}) {
      for (index_t ib = 0; ib < {{ domain[0] }}; ib += {{ block_size[0] }}) {
          const index_t imax = std::min({{ domain[0] }} - ib, (index_t){{ block_size[0] }});
          const index_t jmax = std::min({{ domain[1] }} - jb, (index_t){{ block_size[1] }});
        {%- if block_size[2] > 1 %}
          const index_t kmax = std::min({{ domain[2] }} - kb, (index_t){{ block_size[2] }});
          for (index_t k = 0; k < kmax; ++k) {
        {%- else %}
          const index_t k = 0;
          {
        {%- endif %}

            for (index_t j = 0; j < jmax; ++j) {
              constexpr vec_t zero_vec = { {% for m in range(vector_size) %}0{{ ', ' if not loop.last }}{% endfor %} };
              index_t i;
              for (i = 0; i < imax - {{ vector_size - 1 }}; i += {{ vector_size }}) {
                const index_t index = (ib + i) * {{ strides[0] }} + (jb + j) * {{ strides[1] }} + (kb + k) * {{ strides[2] }};

                const vec_t inp_ij = load(&inp[index]);
                const vec_t inp_im1j = loadu(&inp[index - {{ strides[0] }}]);
                const vec_t inp_ip1j = loadu(&inp[index + {{ strides[0] }}]);
                const vec_t inp_ijm1 = load(&inp[index - {{ strides[1] }}]);
                const vec_t inp_ijp1 = load(&inp[index + {{ strides[1] }}]);
                const vec_t inp_im2j = loadu(&inp[index - 2 * {{ strides[0] }}]);
                const vec_t inp_im1jm1 = loadu(&inp[index - {{ strides[0] }} - {{ strides[1] }}]);
                const vec_t inp_im1jp1 = loadu(&inp[index - {{ strides[0] }} + {{ strides[1] }}]);
                const vec_t inp_ip2j = loadu(&inp[index + 2 * {{ strides[0] }}]);
                const vec_t inp_ip1jm1 = loadu(&inp[index + {{ strides[0] }} - {{ strides[1] }}]);
                const vec_t inp_ip1jp1 = loadu(&inp[index + {{ strides[0] }} + {{ strides[1] }}]);
                const vec_t inp_ijm2 = load(&inp[index - 2 * {{ strides[1] }}]);
                const vec_t inp_ijp2 = load(&inp[index + 2 * {{ strides[1] }}]);

                const vec_t lap_ij = 4 * inp_ij - inp_im1j - inp_ip1j -
                inp_ijm1 - inp_ijp1;
                const vec_t lap_imj = 4 * inp_im1j - inp_im2j -
                    inp_ij - inp_im1jm1 -
                    inp_im1jp1;
                const vec_t lap_ipj = 4 * inp_ip1j - inp_ij -
                    inp_ip2j - inp_ip1jm1 -
                    inp_ip1jp1;
                const vec_t lap_ijm = 4 * inp_ijm1 - inp_im1jm1 -
                    inp_ip1jm1 - inp_ijm2 -
                    inp_ij;
                const vec_t lap_ijp = 4 * inp_ijp1 - inp_im1jp1 -
                    inp_ip1jp1 - inp_ij -
                    inp_ijp2;

                vec_t flx_ij = lap_ipj - lap_ij;
                flx_ij = select(flx_ij * (inp_ip1j - inp_ij) > 0, zero_vec, flx_ij);

                vec_t flx_imj = lap_ij - lap_imj;
                flx_imj = select(flx_imj * (inp_ij - inp_im1j) > 0, zero_vec, flx_imj);

                vec_t fly_ij = lap_ijp - lap_ij;
                fly_ij = select(fly_ij * (inp_ijp1 - inp_ij) > 0, zero_vec, fly_ij);

                vec_t fly_ijm = lap_ij - lap_ijm;
                fly_ijm = select(fly_ijm * (inp_ij - inp_ijm1) > 0, zero_vec, fly_ijm);

                vec_t out_ij = inp_ij - load(&coeff[index]) * (flx_ij - flx_imj +
                                                               fly_ij - fly_ijm);
                storent(&out[index], out_ij);
              }

              for (; i < imax; ++i) {
                const index_t index = (ib + i) * {{ strides[0] }} + (jb + j) * {{ strides[1] }} + (kb + k) * {{ strides[2] }};

                const {{ ctype }} inp_ij = inp[index];
                const {{ ctype }} inp_im1j = inp[index - {{ strides[0] }}];
                const {{ ctype }} inp_ip1j = inp[index + {{ strides[0] }}];
                const {{ ctype }} inp_ijm1 = inp[index - {{ strides[1] }}];
                const {{ ctype }} inp_ijp1 = inp[index + {{ strides[1] }}];
                const {{ ctype }} inp_im2j = inp[index - 2 * {{ strides[0] }}];
                const {{ ctype }} inp_im1jm1 = inp[index - {{ strides[0] }} - {{ strides[1] }}];
                const {{ ctype }} inp_im1jp1 = inp[index - {{ strides[0] }} + {{ strides[1] }}];
                const {{ ctype }} inp_ip2j = inp[index + 2 * {{ strides[0] }}];
                const {{ ctype }} inp_ip1jm1 = inp[index + {{ strides[0] }} - {{ strides[1] }}];
                const {{ ctype }} inp_ip1jp1 = inp[index + {{ strides[0] }} + {{ strides[1] }}];
                const {{ ctype }} inp_ijm2 = inp[index - 2 * {{ strides[1] }}];
                const {{ ctype }} inp_ijp2 = inp[index + 2 * {{ strides[1] }}];

                const {{ ctype }} lap_ij = 4 * inp_ij - inp_im1j - inp_ip1j -
                inp_ijm1 - inp_ijp1;
                const {{ ctype }} lap_imj = 4 * inp_im1j - inp_im2j -
                    inp_ij - inp_im1jm1 -
                    inp_im1jp1;
                const {{ ctype }} lap_ipj = 4 * inp_ip1j - inp_ij -
                    inp_ip2j - inp_ip1jm1 -
                    inp_ip1jp1;
                const {{ ctype }} lap_ijm = 4 * inp_ijm1 - inp_im1jm1 -
                    inp_ip1jm1 - inp_ijm2 -
                    inp_ij;
                const {{ ctype }} lap_ijp = 4 * inp_ijp1 - inp_im1jp1 -
                    inp_ip1jp1 - inp_ij -
                    inp_ijp2;

                {{ ctype }} flx_ij = lap_ipj - lap_ij;
                flx_ij = flx_ij * (inp_ip1j - inp_ij) > 0 ? 0 : flx_ij;

                {{ ctype }} flx_imj = lap_ij - lap_imj;
                flx_imj = flx_imj * (inp_ij - inp_im1j) > 0 ? 0 : flx_imj;

                {{ ctype }} fly_ij = lap_ijp - lap_ij;
                fly_ij = fly_ij * (inp_ijp1 - inp_ij) > 0 ? 0 : fly_ij;

                {{ ctype }} fly_ijm = lap_ij - lap_ijm;
                fly_ijm = fly_ijm * (inp_ij - inp_ijm1) > 0 ? 0 : fly_ijm;

                out[index] = inp_ij - coeff[index] * (flx_ij - flx_imj +
                                        fly_ij - fly_ijm);
              }
              /* nonsense data modification to avoid break in access stream and thus hardware prefetching failure */
              if (ib + {{ block_size[0] }} >= {{ domain[0] }}) {
                const index_t index = (ib + imax) * {{ strides[0] }} + (jb + j) * {{ strides[1] }} + (kb + k) * {{ strides[2] }};
                out[index] = inp[index] + inp[index + {{ 2 * strides[1] }}] + coeff[index];
              }
            }
          }
      }
    }
  }
{% endblock kernel_invoke %}
