{% extends "base.j2" %}

{% block kernel_invoke %}
  #pragma omp parallel
  {
    index_t thread = omp_get_thread_num();
    index_t total_threads = omp_get_num_threads();

    vec_t inpb[5][4];
    vec_t lapb[5][4];
    vec_t flxb[5][4];
    vec_t flyb[5][4];

    constexpr index_t global_end = {{ strides[0] }} * ({{ domain[0] }} - 1) +
                                          {{ strides[1] }} * ({{ domain[1] }} - 1) +
                                          {{ strides[2] }} * ({{ domain[2] }} - 1) + 1;
    index_t start = thread * global_end / total_threads;
    index_t end = (thread + 1) * global_end / total_threads;

    start = start / {{ vector_size }} * {{ vector_size }};
    if (thread == total_threads - 1)
      end = (end + {{ vector_size - 1 }}) / {{ vector_size }} * {{ vector_size }};
    else
      end = end / {{ vector_size }} * {{ vector_size }};

    constexpr ivec_t iminus = { {% for m in range(vector_size, 2 * vector_size) %}{{ m - 1 }}{{ ', ' if not loop.last }}{% endfor %} };
    constexpr ivec_t iplus = { {% for m in range(vector_size) %}{{ m + 1 }}{{ ', ' if not loop.last }}{% endfor %} };

    inpb[1][0] = *(vec_t*)&inp[start - {{ vector_size * strides[0] }} - {{ strides[1] }}];
    inpb[1][1] = *(vec_t*)&inp[start - {{ strides[1] }}];
    inpb[2][0] = *(vec_t*)&inp[start - {{ vector_size * strides[0] }}];
    inpb[2][1] = *(vec_t*)&inp[start];
    inpb[2][2] = *(vec_t*)&inp[start + {{ vector_size * strides[0] }}];
    inpb[3][0] = *(vec_t*)&inp[start - {{ vector_size * strides[0] }} + {{ strides[1] }}];
    inpb[3][1] = *(vec_t*)&inp[start + {{ strides[1] }}];

    lapb[2][0] = 4 * inpb[2][0] - __builtin_shuffle(inpb[2][0], inpb[2][1], iplus)
                                - __builtin_shuffle(inpb[2][0], inpb[2][0], iminus)
                                - inpb[1][0] - inpb[3][0];
    lapb[2][1] = 4 * inpb[2][1] - __builtin_shuffle(inpb[2][1], inpb[2][2], iplus)
                                - __builtin_shuffle(inpb[2][0], inpb[2][1], iminus)
                                - inpb[1][1] - inpb[3][1];

    flxb[2][0] = __builtin_shuffle(lapb[2][0], lapb[2][1], iplus) - lapb[2][0];
    flxb[2][0] = flxb[2][0] * (__builtin_shuffle(inpb[2][0], inpb[2][1], iplus) - inpb[2][0]) > 0 ? 0 : flxb[2][0];

    for (index_t i = start; i < end; i += {{ vector_size }}) {
      inpb[0][1] = *(vec_t*)&inp[i - {{ 2 * strides[1] }}];
      inpb[1][2] = *(vec_t*)&inp[i + {{ vector_size * strides[0] }} - {{ strides[1] }}];
      inpb[2][3] = *(vec_t*)&inp[i + {{ 2 * vector_size * strides[0] }} ];
      inpb[3][2] = *(vec_t*)&inp[i + {{ vector_size * strides[0] }} + {{ strides[1] }}];
      inpb[4][1] = *(vec_t*)&inp[i + {{ 2 * strides[1] }}];

      lapb[1][1] = 4 * inpb[1][1] - __builtin_shuffle(inpb[1][1], inpb[1][2], iplus)
                                  - __builtin_shuffle(inpb[1][0], inpb[1][1], iminus)
                                  - inpb[0][1] - inpb[2][1];

      lapb[2][2] = 4 * inpb[2][2] - __builtin_shuffle(inpb[2][2], inpb[2][3], iplus)
                                  - __builtin_shuffle(inpb[2][1], inpb[2][2], iminus)
                                  - inpb[1][2] - inpb[3][2];

      lapb[3][1] = 4 * inpb[3][1] - __builtin_shuffle(inpb[3][1], inpb[3][2], iplus)
                                  - __builtin_shuffle(inpb[3][0], inpb[3][1], iminus)
                                  - inpb[2][1] - inpb[4][1];

      flxb[2][1] = __builtin_shuffle(lapb[2][1], lapb[2][2], iplus) - lapb[2][1];
      flxb[2][1] = flxb[2][1] * (__builtin_shuffle(inpb[2][1], inpb[2][2], iplus) - inpb[2][1]) > 0 ? 0 : flxb[2][1];

      flyb[1][1] = lapb[2][1] - lapb[1][1];
      flyb[1][1] = flyb[1][1] * (inpb[2][1] - inpb[1][1]) > 0 ? 0 : flyb[1][1];

      flyb[2][1] = lapb[3][1] - lapb[2][1];
      flyb[2][1] = flyb[2][1] * (inpb[3][1] - inpb[2][1]) > 0 ? 0 : flyb[2][1];

      vec_t out_ij = inpb[2][1] - *(vec_t*)&coeff[i] * (flxb[2][1] - __builtin_shuffle(flxb[2][0], flxb[2][1], iminus) +
                                                        flyb[2][1] - flyb[1][1]);
      NTSTORE(&out[i], out_ij);

      inpb[1][0] = inpb[1][1];
      inpb[1][1] = inpb[1][2];
      inpb[2][1] = inpb[2][2];
      inpb[2][2] = inpb[2][3];
      inpb[3][0] = inpb[3][1];
      inpb[3][1] = inpb[3][2];
      lapb[2][1] = lapb[2][2];
      flxb[2][0] = flxb[2][1];
    }
  }
{% endblock kernel_invoke %}
