{#
Stencil Benchmarks

Copyright (c) 2017-2021, ETH Zurich and MeteoSwiss
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

SPDX-License-Identifier: BSD-3-Clause
#}
{% extends "base.j2" %}

{% block kernel_invoke %}
constexpr {{ ctype }} dtr_stage = 3.0 / 20.0;
constexpr {{ ctype }} beta_v = 0;
constexpr {{ ctype }} bet_m = 0.5 * (1.0 - beta_v);
constexpr {{ ctype }} bet_p = 0.5 * (1.0 + beta_v);

#pragma omp parallel
{
    vec_t ccoll[{{ blocked_domain[2] }}];
    vec_t dcoll[{{ blocked_domain[2] }}];

#pragma omp for collapse(2)
    for (index_t j = 0; j < {{ blocked_domain[1] }}; ++j) {
        for (index_t i = 0; i < {{ blocked_domain[0] }}; ++i) {
             vec_t ccol0, ccol1; 
             vec_t dcol0, dcol1;
             vec_t ustage0, ustage1, ustage2;
             vec_t wcon0, wcon1;
             vec_t wcon_shift0, wcon_shift1;
             vec_t datacoll;

            // k minimum
            {
                index_t k = 0;
                index_t idx = index(i, j, k);

                wcon0 = load(&wcon[idx + {{ blocked_strides[2] }}]);
                vec_t wcon_shift0_hi = load(&wcon[idx + {{ blocked_strides[0] + blocked_strides[2] }}]);
                wcon_shift0 = shuffle(wcon0, wcon_shift0_hi{% for m in range(vector_size) %}, {{ m + 1 }}{% endfor %});

                vec_t gcv = {{ ctype }}(0.25) * (wcon_shift0 + wcon0);
                vec_t cs = gcv * bet_m;

                ccol0 = gcv * bet_p;
                vec_t bcol = dtr_stage - ccol0;

                ustage0 = load(&ustage[idx + {{ blocked_strides[2] }}]);
                ustage1 = load(&ustage[idx]);
                vec_t correction_term = -cs * (ustage0 - ustage1);
                dcol0 = dtr_stage * load(&upos[idx]) + load(&utens[idx]) + load(&utensstage[idx]) + correction_term;

                vec_t divided = {{ ctype }}(1.0) / bcol;
                ccol0 = ccol0 * divided;
                dcol0 = dcol0 * divided;

                ccoll[k] = ccol0;
                dcoll[k] = dcol0;
            }

            // k body
            for (index_t k = 1; k < {{ blocked_domain[2] }} - 1; ++k) {
                index_t idx = index(i, j, k);

                ccol1 = ccol0;
                dcol1 = dcol0;
                ustage2 = ustage1;
                ustage1 = ustage0;
                wcon1 = wcon0;
                wcon_shift1 = wcon_shift0;

                wcon0 = load(&wcon[idx + {{ blocked_strides[2] }}]);
                vec_t wcon_shift0_hi = load(&wcon[idx + {{ blocked_strides[0] + blocked_strides[2] }}]);
                wcon_shift0 = shuffle(wcon0, wcon_shift0_hi{% for m in range(vector_size) %}, {{ m + 1 }}{% endfor %});

                vec_t gav = {{ ctype }}(-0.25) * (wcon_shift1 + wcon1);
                vec_t gcv = {{ ctype }}(0.25) * (wcon_shift0 + wcon0);

                vec_t as = gav * bet_m;
                vec_t cs = gcv * bet_m;

                vec_t acol = gav * bet_p;
                ccol0 = gcv * bet_p;
                vec_t bcol = dtr_stage - acol - ccol0;

                ustage0 = load(&ustage[idx + {{ blocked_strides[2] }}]);
                vec_t correction_term = -as * (ustage2 - ustage1) - cs * (ustage0 - ustage1);
                dcol0 = dtr_stage * load(&upos[idx]) + load(&utens[idx]) + load(&utensstage[idx]) + correction_term;

                vec_t divided = {{ ctype }}(1.0) / (bcol - ccol1 * acol);
                ccol0 = ccol0 * divided;
                dcol0 = (dcol0 - dcol1 * acol) * divided;

                ccoll[k] = ccol0;
                dcoll[k] = dcol0;
            }
            // k maximum
            {
                index_t k = {{ blocked_domain[2] - 1 }};
                index_t idx = index(i, j, k);

                ccol1 = ccol0;
                dcol1 = dcol0;
                ustage2 = ustage1;
                ustage1 = ustage0;
                wcon1 = wcon0;
                wcon_shift1 = wcon_shift0;

                vec_t gav = {{ ctype }}(-0.25) * (wcon_shift1 + wcon1);

                vec_t as = gav * bet_m;

                vec_t acol = gav * bet_p;
                vec_t bcol = dtr_stage - acol;

                vec_t correction_term = -as * (ustage2 - ustage1);
                dcol0 = dtr_stage * load(&upos[idx]) + load(&utens[idx]) + load(&utensstage[idx]) + correction_term;

                vec_t divided = {{ ctype }}(1.0) / (bcol - ccol1 * acol);
                dcol0 = (dcol0 - dcol1 * acol) * divided;

                datacoll = dcol0;
                store(&utensstage[idx], dtr_stage * (datacoll - load(&upos[idx])));
            }

            for (index_t k = {{ blocked_domain[2] - 2 }}; k >= 0; --k) {
                index_t idx = index(i, j, k);

                datacoll = dcoll[k] - ccoll[k] * datacoll;
                store(&utensstage[idx], dtr_stage * (datacoll - load(&upos[idx])));
            }
        }
    }
}
{% endblock kernel_invoke %}
