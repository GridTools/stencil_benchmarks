#include <chrono>
#include <cstdint>
#include <iostream>

{%- if backend == "hip" %}
#include <hip/hip_runtime.h>
using hipDeviceProp = hipDeviceProp_t;
{% endif %}

inline void check({{ backend }}Error_t error, std::string const& invocation) {
    if (error != {{ backend }}Success)
        std::cerr << invocation << " failed: " << {{ backend }}GetErrorString(error) << std::endl;
}

#define CHECK(x) check(({{ backend }}##x), #x)

{% block gpu_kernel %}
__global__ void gpu_kernel(
    {%- for arg in args %}
        {{ ctype }} * __restrict__ {{ arg }}{{ "," if not loop.last }}
    {%- endfor %}
) {
{% block gpu_kernel_body %}
{% endblock gpu_kernel_body %}
}
{% endblock gpu_kernel %}

{% block kernel %}
extern "C" double kernel(
    {%- for arg in args %}
        {{ ctype }} * __restrict__ {{ arg }}{{ "," if not loop.last }}
    {%- endfor %}
) {
    {% block kernel_prepare %}
    dim3 block_size({{ block_size[0] }},
                {{ block_size[1] }},
                {{ block_size[2] }});
    dim3 grid_size({{ (domain[0] + block_size[0] - 1) // block_size[0] }},
                {{ (domain[1] + block_size[1] - 1) // block_size[1] }},
                {{ (domain[2] + block_size[2] - 1) // block_size[2] }});
    {% endblock kernel_prepare %}

    {%- if gpu_timers %}
    {{ backend }}Event_t start, stop;
    CHECK(EventCreate(&start));
    CHECK(EventCreate(&stop));
    
    CHECK(EventRecord(start));
    {%- else %}
    using clock = std::chrono::high_resolution_clock;
    auto start = clock::now();
    {%- endif %}

    {% block kernel_invoke %}
    gpu_kernel<<<grid_size, block_size>>>(
        {% for arg in args %}
            {{ arg }}{{ "," if not loop.last }}
        {%- endfor %}
    );
    {% endblock kernel_invoke %}

    CHECK(GetLastError());

    {%- if gpu_timers %}
    CHECK(EventRecord(stop));

    CHECK(EventSynchronize(stop));

    float time;
    CHECK(EventElapsedTime(&time, start, stop));
    return time / 1000.0;
    {%- else %}
    CHECK(DeviceSynchronize());

    auto stop = clock::now();
    return std::chrono::duration<double>(stop - start).count();
    {%- endif %}
}
{% endblock kernel %}