#include <chrono>
#include <cstdint>
#include <iostream>

{%- if backend == "hip" %}
#include <hip/hip_runtime.h>
using hipDeviceProp = hipDeviceProp_t;
{% endif %}

#define CHECK(x) { \
                    {{ backend }}Error_t error = {{ backend }}##x; \
                        if (error != {{ backend }}Success) { \
                            std::cerr << #x << " failed: " << {{ backend }}GetErrorString(error) << std::endl; \
                            while ({{ backend }}GetLastError() != {{ backend }}Success) ; \
                            return 0.0; \
                        } \
                 }

{% block gpu_kernel %}
__global__ void gpu_kernel(
    {%- for arg in args %}
        {{ ctype }} * __restrict__ {{ arg }}{{ "," if not loop.last }}
    {%- endfor %}
) {
{% block gpu_kernel_body %}
{% endblock gpu_kernel_body %}
}
{% endblock gpu_kernel %}

{% block kernel %}
extern "C" double kernel(
    {%- for arg in args %}
        {{ ctype }} * __restrict__ {{ arg }}{{ "," if not loop.last }}
    {%- endfor %}
) {
    int device;
    {{ backend }}DeviceProp device_properties;
    CHECK(GetDevice(&device));
    CHECK(GetDeviceProperties(&device_properties, device));

    dim3 block_size({{ block_size[0] }},
                {{ block_size[1] }},
                {{ block_size[2] }});
    dim3 grid_size({{ (domain[0] + block_size[0] - 1) // block_size[0] }},
                {{ (domain[1] + block_size[1] - 1) // block_size[1] }},
                {{ (domain[2] + block_size[2] - 1) // block_size[2] }});
    unsigned smem_size = 0;
    {% block kernel_prepare %}
    {% endblock kernel_prepare %}

    if (smem_size > device_properties.sharedMemPerBlock) {
        std::cerr << "too much shared memory requested: "
                  << smem_size
                  << "B (max: "
                  << device_properties.sharedMemPerBlock
                  << "B)" << std::endl;
        return 0.0;
    }
    if ((std::size_t)(block_size.x * block_size.y * block_size.z) > (std::size_t)device_properties.maxThreadsPerBlock) {
        std::cerr << "too many threads per block: "
                  << (block_size.x * block_size.y * block_size.z)
                  << " (max: "
                  << device_properties.maxThreadsPerBlock
                  << ")" << std::endl;
        return 0.0;
    }
    if ((std::size_t)block_size.x > (std::size_t)device_properties.maxThreadsDim[0] ||
        (std::size_t)block_size.y > (std::size_t)device_properties.maxThreadsDim[1] ||
        (std::size_t)block_size.z > (std::size_t)device_properties.maxThreadsDim[2]) {
        std::cerr << "block size too large: "
                  << block_size.x << " "
                  << block_size.y << " "
                  << block_size.z
                  << " (max: "
                  << device_properties.maxThreadsDim[0] << " "
                  << device_properties.maxThreadsDim[1] << " "
                  << device_properties.maxThreadsDim[2] << ")"
                  << std::endl;
        return 0.0;
    }
    if ((std::size_t)grid_size.x > (std::size_t)device_properties.maxGridSize[0] ||
        (std::size_t)grid_size.y > (std::size_t)device_properties.maxGridSize[1] ||
        (std::size_t)grid_size.z > (std::size_t)device_properties.maxGridSize[2]) {
        std::cerr << "grid size too large: "
                  << grid_size.x << " "
                  << grid_size.y << " "
                  << grid_size.z
                  << " (max: "
                  << device_properties.maxGridSize[0] << " "
                  << device_properties.maxGridSize[1] << " "
                  << device_properties.maxGridSize[2] << ")"
                  << std::endl;
        return 0.0;
    }


    {%- if gpu_timers %}
    {{ backend }}Event_t start, stop;
    CHECK(EventCreate(&start));
    CHECK(EventCreate(&stop));
    
    CHECK(EventRecord(start));
    {%- else %}
    using clock = std::chrono::high_resolution_clock;
    auto start = clock::now();
    {%- endif %}

    gpu_kernel<<<grid_size, block_size, smem_size>>>(
        {% for arg in args %}
            {{ arg }}{{ "," if not loop.last }}
        {%- endfor %}
    );

    CHECK(GetLastError());

    {%- if gpu_timers %}
    CHECK(EventRecord(stop));

    CHECK(EventSynchronize(stop));

    float time;
    CHECK(EventElapsedTime(&time, start, stop));
    return time / 1000.0;
    {%- else %}
    CHECK(DeviceSynchronize());

    auto stop = clock::now();
    return std::chrono::duration<double>(stop - start).count();
    {%- endif %}
}
{% endblock kernel %}