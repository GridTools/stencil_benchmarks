#include <chrono>
#include <cstdint>
#include <iostream>

{%- if backend == "hip" %}
#include <hip/hip_runtime.h>
{% endif %}

{% set elements = strides[0] * (domain[0] - 1) + strides[1] * (domain[1] - 1) + strides[2] * (domain[2] - 1) + 1 %}

__global__ void __launch_bounds__({{ block_size[0] * block_size[1] * block_size[2] }}) gpu_kernel(
    {%- for arg in args %}
        {{ ctype }} * __restrict__ {{ arg }}{{ "," if not loop.last }}
    {%- endfor %}
) {
    {%- if block_size[2] > 1 %}
        int index = {{ block_size[2] }} * blockIdx.z + threadIdx.z;
    {%- elif block_size[1] > 1 %}
        int index = {{ block_size[1] }} * blockIdx.y + threadIdx.y;
    {%- else %}
        int index = {{ block_size[0] }} * blockIdx.x + threadIdx.x;
    {%- endif %}

    if (index < {{ elements }}) {
        {{ body }}
    }
}

extern "C" double kernel(
    {%- for arg in args %}
        {{ ctype }} * __restrict__ {{ arg }}{{ "," if not loop.last }}
    {%- endfor %}
) {
    dim3 block_size({{ block_size[0] }},
                    {{ block_size[1] }},
                    {{ block_size[2] }});
    dim3 grid_size({{ (elements + block_size[0] - 1) // block_size[0] if block_size[0] > 1 else 1 }},
                   {{ (elements + block_size[1] - 1) // block_size[1] if block_size[1] > 1 else 1 }},
                   {{ (elements + block_size[2] - 1) // block_size[2] if block_size[2] > 1 else 1 }});

    using clock = std::chrono::high_resolution_clock;
    auto start = clock::now();

    gpu_kernel<<<grid_size, block_size>>>(
        {% for arg in args %}
            {{ arg }}{{ "," if not loop.last }}
        {%- endfor %}
    );
    
    {{ backend }}Error_t err;
    if ((err = {{ backend }}GetLastError()) != {{ backend }}Success) {
        std::cerr << "kernel launch failure: " << {{ backend }}GetErrorString(err) << std::endl;
    }
    if ((err = {{ backend }}DeviceSynchronize()) != {{ backend }}Success) {
        std::cerr << "synchronization failure: " << {{ backend }}GetErrorString(err) << std::endl;
    }

    auto stop = clock::now();
    return std::chrono::duration<double>(stop - start).count();
}