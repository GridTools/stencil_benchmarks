{% extends "base.j2" %}

{% set block_halo = 2 %}

{% block gpu_kernel_body %}
    const {{ index_type }} i = {{ index_type }}(blockIdx.x) * {{ block_size[0] }} + threadIdx.x;
    const {{ index_type }} j_min = {{ index_type }}(blockIdx.y) * {{ block_size[1] }} - {{ block_halo }};
    const {{ index_type }} k = {{ index_type }}(blockIdx.z) * {{ block_size[2] }} + threadIdx.z;

    const {{ index_type }} jb_max = (blockIdx.y + 1) * {{ block_size[1] }} <= {{ domain[1] }} ? {{ block_size[1] }} : {{ domain[1] }} - blockIdx.y * {{ block_size[1] }};
    if (k >= {{ domain[2] }} || i >= {{ domain[0] }})
        return;

    {{ ctype }} fly_ijm1;
    {{ ctype }} lap_im1j, lap_ij, lap_ip1j;
    {{ ctype }} inp_im1j, inp_ij, inp_ip1j;
    {{ ctype }} inp_im2jp1, inp_im1jp1, inp_ijp1, inp_ip1jp1, inp_ip2jp1;
    {{ ctype }} inp_im2jp2, inp_im1jp2, inp_ijp2, inp_ip1jp2, inp_ip2jp2;

    {{ index_type }} index = i * {{ strides[0] }} + j_min * {{ strides[1] }} + k * {{ strides[2] }};

    inp_im1j = inp[index - {{ strides[0] }}];
    inp_ij = inp[index];
    inp_ip1j = inp[index + {{ strides[0] }}];

    inp_im2jp1 = inp[index - 2 * {{ strides[0] }} + {{ strides[1] }}];
    inp_im1jp1 = inp[index - {{ strides[0] }} + {{ strides[1] }}];
    inp_ijp1 = inp[index + {{ strides[1] }}];
    inp_ip1jp1 = inp[index + {{ strides[0] }} + {{ strides[1] }}];
    inp_ip2jp1 = inp[index + 2 * {{ strides[0] }} + {{ strides[1] }}];

    for ({{ index_type }} jb = -{{ block_halo }}; jb < {{ block_size[1] }}; ++jb) {
        if (jb < jb_max) {
            inp_im2jp2 = inp[index - 2 * {{ strides[0] }} + 2 * {{ strides[1] }}];
            inp_im1jp2 = inp[index - {{ strides[0] }} + 2 * {{ strides[1] }}];
            inp_ijp2 = inp[index + 2 * {{ strides[1] }}];
            inp_ip1jp2 = inp[index + {{ strides[0] }} + 2 * {{ strides[1] }}];
            inp_ip2jp2 = inp[index + 2 * {{ strides[0] }} + 2 * {{ strides[1] }}];

            {{ ctype }} lap_im1jp1 = {{ctype }}(4) * inp_im1jp1 - (inp_im2jp1 + inp_ijp1 + inp_im1jp2 + inp_im1j);
            {{ ctype }} lap_ijp1 = {{ctype }}(4) * inp_ijp1 - (inp_im1jp1 + inp_ip1jp1 + inp_ijp2 + inp_ij);
            {{ ctype }} lap_ip1jp1 = {{ctype }}(4) * inp_ip1jp1 - (inp_ijp1 + inp_ip2jp1 + inp_ip1jp2 + inp_ip1j);

            if (jb >= -1) {
                {{ ctype }} fly_ij = lap_ijp1 - lap_ij;
                if (fly_ij * (inp_ijp1 - inp_ij) > {{ctype }}(0)) {
                    fly_ij = 0.;
                }

                if (jb >= 0) {
                    {{ ctype }} flx_ij = lap_ip1j - lap_ij;
                    if (flx_ij * (inp_ip1j - inp_ij) > {{ctype }}(0)) {
                        flx_ij = 0.;
                    }

                    {{ ctype }} flx_im1j = lap_ij - lap_im1j;
                    if (flx_im1j * (inp_ij - inp_im1j) > {{ctype }}(0)) {
                        flx_im1j = 0.;
                    }

                    out[index] = inp_ij - coeff[index] * (flx_ij - 
                                                          flx_im1j +
                                                          fly_ij -
                                                          fly_ijm1);
                }

                fly_ijm1 = fly_ij;
            }

            lap_im1j = lap_im1jp1;
            lap_ij = lap_ijp1;
            lap_ip1j = lap_ip1jp1;

            inp_im1j = inp_im1jp1;
            inp_ij = inp_ijp1;
            inp_ip1j = inp_ip1jp1;
            inp_im2jp1 = inp_im2jp2;
            inp_im1jp1 = inp_im1jp2;
            inp_ijp1 = inp_ijp2;
            inp_ip1jp1 = inp_ip1jp2;
            inp_ip2jp1 = inp_ip2jp2;       

            index += {{ strides[1] }};
        }
    }
{% endblock gpu_kernel_body %}

{% block kernel_prepare %}
    block_size = dim3({{ block_size[0] }},
                      1,
                      {{ block_size[2] }});
    grid_size = dim3({{ (domain[0] + block_size[0] - 1) // block_size[0] }},
                     {{ (domain[1] + block_size[1] - 1) // block_size[1] }},
                     {{ (domain[2] + block_size[2] - 1) // block_size[2] }});
{% endblock kernel_prepare %}
