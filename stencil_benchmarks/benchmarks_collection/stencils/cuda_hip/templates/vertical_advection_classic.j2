{#
Stencil Benchmarks

Copyright (c) 2017-2021, ETH Zurich and MeteoSwiss
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

SPDX-License-Identifier: BSD-3-Clause
#}
{% extends "base.j2" %}

{% block gpu_kernel %}
__forceinline__ __device__ void backward_sweep(const {{ ctype }} *ccol,
    const {{ ctype }} *__restrict__ dcol,
    const {{ ctype }} *__restrict__ upos,
    {{ ctype }} *__restrict__ utensstage) {
    constexpr {{ ctype }} dtr_stage = 3.0 / 20.0;
    const {{ index_type }} i = blockIdx.x * {{ block_size[0] }} + threadIdx.x;
    const {{ index_type }} j = blockIdx.y * {{ block_size[1] }} + threadIdx.y;

    {{ ctype }} datacol;

    if (i >= {{ domain[0] }} && j >= {{ domain[1] }})
        return;

    {{ index_type }} index = i * {{ strides[0] }} + j * {{ strides[1] }} + ({{ domain[2] }} - 1) * {{ strides[2] }};
    // k maximum
    {
        datacol = dcol[index];
        utensstage[index] = dtr_stage * (datacol - upos[index]);

        index -= {{ strides[2] }};
    }

    // k body
{%- if unroll_factor >= 0 %}
    #pragma unroll {{ unroll_factor if unroll_factor > 0 }}
{%- endif %}
    for ({{ index_type }} k = {{ domain[2] - 2 }}; k >= 0; --k) {
        datacol = dcol[index] - ccol[index] * datacol;
        utensstage[index] = dtr_stage * (datacol - upos[index]);

        index -= {{ strides[2] }};
    }
}

__forceinline__ __device__ void forward_sweep(const {{ index_type }} ishift,
    const {{ index_type }} jshift,
    {{ ctype }} *__restrict__ ccol,
    {{ ctype }} *__restrict__ dcol,
    const {{ ctype }} *__restrict__ wcon,
    const {{ ctype }} *__restrict__ ustage,
    const {{ ctype }} *__restrict__ upos,
    const {{ ctype }} *__restrict__ utens,
    const {{ ctype }} *__restrict__ utensstage) {
    constexpr {{ ctype }} dtr_stage = 3.0 / 20.0;
    constexpr {{ ctype }} beta_v = 0;
    constexpr {{ ctype }} bet_m = 0.5 * (1.0 - beta_v);
    constexpr {{ ctype }} bet_p = 0.5 * (1.0 + beta_v);
    const {{ index_type }} i = blockIdx.x * {{ block_size[0] }} + threadIdx.x;
    const {{ index_type }} j = blockIdx.y * {{ block_size[1] }} + threadIdx.y;

    {{ ctype }} ccol0, ccol1;
    {{ ctype }} dcol0, dcol1;
    {{ ctype }} ustage0, ustage1, ustage2;
    {{ ctype }} wcon0, wcon1;
    {{ ctype }} wcon_shift0, wcon_shift1;

    if (i >= {{ domain[0] }} && j >= {{ domain[1] }})
        return;

    {{ index_type }} index = i * {{ strides[0] }} + j * {{ strides[1] }};
    // k minimum
    {
        wcon_shift0 = wcon[index + ishift * {{ strides[0] }} + jshift * {{ strides[1] }} + {{ strides[2] }}];
        wcon0 = wcon[index + {{ strides[2] }}];
        {{ ctype }} gcv = {{ ctype }}(0.25) * (wcon_shift0 + wcon0);
        {{ ctype }} cs = gcv * bet_m;

        ccol0 = gcv * bet_p;
        {{ ctype }} bcol = dtr_stage - ccol0;

        ustage0 = ustage[index + {{ strides[2] }}];
        ustage1 = ustage[index];
        {{ ctype }} correction_term = -cs * (ustage0 - ustage1);
        dcol0 = dtr_stage * upos[index] + utens[index] + utensstage[index] + correction_term;

        {{ ctype }} divided = {{ ctype }}(1.0) / bcol;
        ccol0 = ccol0 * divided;
        dcol0 = dcol0 * divided;

        ccol[index] = ccol0;
        dcol[index] = dcol0;

        index += {{ strides[2] }};
    }

    // k body
{%- if unroll_factor >= 0 %}
    #pragma unroll {{ unroll_factor if unroll_factor > 0 }}
{%- endif %}
    for ({{ index_type }} k = 1; k < {{ domain[2] - 1 }}; ++k) {
        ccol1 = ccol0;
        dcol1 = dcol0;
        ustage2 = ustage1;
        ustage1 = ustage0;
        wcon1 = wcon0;
        wcon_shift1 = wcon_shift0;

        {{ ctype }} gav = {{ ctype }}(-0.25) * (wcon_shift1 + wcon1);
        wcon_shift0 = wcon[index + ishift * {{ strides[0] }} + jshift * {{ strides[1] }} + {{ strides[2] }}];
        wcon0 = wcon[index + {{ strides[2] }}];
        {{ ctype }} gcv = {{ ctype }}(0.25) * (wcon_shift0 + wcon0);

        {{ ctype }} as = gav * bet_m;
        {{ ctype }} cs = gcv * bet_m;

        {{ ctype }} acol = gav * bet_p;
        ccol0 = gcv * bet_p;
        {{ ctype }} bcol = dtr_stage - acol - ccol0;

        ustage0 = ustage[index + {{ strides[2] }}];
        {{ ctype }} correction_term = -as * (ustage2 - ustage1) - cs * (ustage0 - ustage1);
        dcol0 = dtr_stage * upos[index] + utens[index] + utensstage[index] + correction_term;

        {{ ctype }} divided = {{ ctype }}(1.0) / (bcol - ccol1 * acol);
        ccol0 = ccol0 * divided;
        dcol0 = (dcol0 - dcol1 * acol) * divided;

        ccol[index] = ccol0;
        dcol[index] = dcol0;

        index += {{ strides[2] }};
    }

    // k maximum
    {
        ccol1 = ccol0;
        dcol1 = dcol0;
        ustage2 = ustage1;
        ustage1 = ustage0;
        wcon1 = wcon0;
        wcon_shift1 = wcon_shift0;

        {{ ctype }} gav = {{ ctype }}(-0.25) * (wcon_shift1 + wcon1);

        {{ ctype }} as = gav * bet_m;

        {{ ctype }} acol = gav * bet_p;
        {{ ctype }} bcol = dtr_stage - acol;

        {{ ctype }} correction_term = -as * (ustage2 - ustage1);
        dcol0 = dtr_stage * upos[index] + utens[index] + utensstage[index] + correction_term;

        {{ ctype }} divided = {{ ctype }}(1.0) / (bcol - ccol1 * acol);
        dcol0 = (dcol0 - dcol1 * acol) * divided;

        ccol[index] = ccol0;
        dcol[index] = dcol0;
    }
}


__global__ void __launch_bounds__({{ block_size[0] * block_size[1] }}) gpu_kernel_{{ implementation_name }}(
    const {{ ctype }} *__restrict__ ustage,
    const {{ ctype }} *__restrict__ upos,
    const {{ ctype }} *__restrict__ utens,
    {{ ctype }} *__restrict__ utensstage,
{%- if all_components %}
    const {{ ctype }} *__restrict__ vstage,
    const {{ ctype }} *__restrict__ vpos,
    const {{ ctype }} *__restrict__ vtens,
    {{ ctype }} *__restrict__ vtensstage,
    const {{ ctype }} *__restrict__ wstage,
    const {{ ctype }} *__restrict__ wpos,
    const {{ ctype }} *__restrict__ wtens,
    {{ ctype }} *__restrict__ wtensstage,
{%- endif %}
    const {{ ctype }} *__restrict__ wcon,
    {{ ctype }} *__restrict__ ccol,
    {{ ctype }} *__restrict__ dcol,
    {{ ctype }} *__restrict__ /*datacol*/) {
    forward_sweep(1,
        0,
        ccol,
        dcol,
        wcon,
        ustage,
        upos,
        utens,
        utensstage);
    backward_sweep(ccol, dcol, upos, utensstage);

{%- if all_components %}
    forward_sweep(0,
        1,
        ccol,
        dcol,
        wcon,
        vstage,
        vpos,
        vtens,
        vtensstage);
    backward_sweep(ccol, dcol, vpos, vtensstage);

    forward_sweep(0,
        0,
        ccol,
        dcol,
        wcon,
        wstage,
        wpos,
        wtens,
        wtensstage);
    backward_sweep(ccol, dcol, wpos, wtensstage);
{%- endif %}
}
{% endblock gpu_kernel %}

{% block kernel_prepare %}
    block_size = dim3({{ block_size[0] }},
                      {{ block_size[1] }},
                      1);
    grid_size = dim3({{ ( domain[0] + block_size[0] - 1) // block_size[0] }},
                     {{ ( domain[1] + block_size[1] - 1) // block_size[1] }},
                     1);
{% endblock kernel_prepare %}
