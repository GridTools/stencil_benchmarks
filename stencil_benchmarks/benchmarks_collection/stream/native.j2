{% extends "original.j2" %}

{% block includes %}
{%- for include in ops.includes %}
#include <{{ include }}>
{%- endfor %}
{% endblock %}

{% block kernels %}

{%- set step = ops.vector_size * unroll_factor %}

/* Tuned kernels. */

{{ ops.preamble }}

void tuned_STREAM_Copy()
{
    ssize_t j;
#pragma omp parallel for
    for (j = 0; j < STREAM_ARRAY_SIZE - {{ step - 1 }}; j += {{ step }}) {
{%- for u in range(unroll_factor) %}
        {%- set offset = (u * ops.vector_size) | string %}
        {{ ops.store('&c[j + ' + offset + ']', ops.load('&a[j + ' + offset + ']')) }};
{%- endfor %}
    }
    for (j = STREAM_ARRAY_SIZE / {{ step }} * {{ step }};
         j < STREAM_ARRAY_SIZE; ++j) {
        c[j] = a[j];
    }
}

void tuned_STREAM_Scale(STREAM_TYPE scalar)
{
    ssize_t j;
    {{ ops.vector_type }} scalarv;
    scalarv = {{ ops.broadcast('scalar') }};
#pragma omp parallel for
    for (j = 0; j < STREAM_ARRAY_SIZE - {{ step - 1 }}; j += {{ step }}) {
{%- for u in range(unroll_factor) %}
        {%- set offset = (u * ops.vector_size) | string %}
        {{ ops.store('&b[j + ' + offset + ']', ops.mul('scalarv', ops.load('&c[j + ' + offset + ']'))) }};
{%- endfor %}
    }
    for (j = STREAM_ARRAY_SIZE / {{ step }} * {{ step }};
         j < STREAM_ARRAY_SIZE; ++j) {
        b[j] = scalar * c[j];
    }
}

void tuned_STREAM_Add()
{
    ssize_t j;
#pragma omp parallel for
    for (j = 0; j < STREAM_ARRAY_SIZE - {{ step - 1 }}; j += {{ step }}) {
{%- for u in range(unroll_factor) %}
        {%- set offset = (u * ops.vector_size) | string %}
        {{ ops.store('&c[j + ' + offset + ']', ops.add(ops.load('&a[j + ' + offset + ']'), ops.load('&b[j + ' + offset + ']'))) }};
{%- endfor %}
    }
    for (j = STREAM_ARRAY_SIZE / {{ step }} * {{ step }};
         j < STREAM_ARRAY_SIZE; ++j) {
        c[j] = a[j] + b[j];
    }
}

void tuned_STREAM_Triad(STREAM_TYPE scalar)
{
    ssize_t j;
    {{ ops.vector_type }} scalarv;
    scalarv = {{ ops.broadcast('scalar') }};
#pragma omp parallel for
    for (j = 0; j < STREAM_ARRAY_SIZE - {{ step - 1 }}; j += {{ step }}) {
{%- for u in range(unroll_factor) %}
        {%- set offset = (u * ops.vector_size) | string %}
        {{ ops.store('&a[j + ' + offset + ']', ops.fma('scalarv', ops.load('&c[j + ' + offset + ']'), ops.load('&b[j + ' + offset + ']'))) }};
{%- endfor %}
    }
    for (j = STREAM_ARRAY_SIZE / {{ step }} * {{ step }};
         j < STREAM_ARRAY_SIZE; ++j) {
        a[j] = b[j] + scalar * c[j];
    }
}
{% endblock kernels %}