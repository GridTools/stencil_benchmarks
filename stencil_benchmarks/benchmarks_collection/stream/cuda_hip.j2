{#
Stencil Benchmarks

Copyright (c) 2017-2020, ETH Zurich and MeteoSwiss
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

SPDX-License-Identifier: BSD-3-Clause
#}
#include <cstdio>
#include <iostream>
#include <limits>
#include <vector>

#ifdef __HIPCC__
#include <hip/hip_runtime.h>
#define GPU(x) hip##x
#else
#define GPU(x) cuda##x

__device__ inline {{ ctype }}2 operator+ ({{ ctype }}2 a, {{ ctype }}2 b) {
    return make_{{ ctype }}2(a.x + b.x, a.y + b.y);
}
__device__ inline {{ ctype }}2 operator* (float a, {{ ctype }}2 b) {
    return make_{{ ctype }}2(a * b.x, a * b.y);
}
__device__ inline {{ ctype }}3 operator+ ({{ ctype }}3 a, {{ ctype }}3 b) {
    return make_{{ ctype }}3(a.x + b.x, a.y + b.y, a.z + b.z);
}
__device__ inline {{ ctype }}3 operator* (float a, {{ ctype }}3 b) {
    return make_{{ ctype }}3(a * b.x, a * b.y, a * b.z);
}
__device__ inline {{ ctype }}4 operator+ ({{ ctype }}4 a, {{ ctype }}4 b) {
    return make_{{ ctype }}4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
}
__device__ inline {{ ctype }}4 operator* (float a, {{ ctype }}4 b) {
    return make_{{ ctype }}4(a * b.x, a * b.y, a * b.z, a * b.w);
}

#endif

#define CHECK(x) { \
                    GPU(Error_t) error = GPU(x); \
                        if (error != GPU(Success)) { \
                            std::cerr << #x << " failed: " << GPU(GetErrorString)(error) << std::endl; \
                            while (GPU(GetLastError)() != GPU(Success)) ; \
                            return 1; \
                        } \
                 }

{%- if vector_size > 1 and explicit_vectorization %}
{%- set ctype_vec = ctype + (vector_size | string) %}
{%- set vector_ctype_elements = 1 %}
{%- else %}
{%- set ctype_vec = ctype %}
{%- set vector_ctype_elements = vector_size %}
{%- endif %}

{%- macro kernel(name) %}
__global__
{%- if launch_bounds %}
__launch_bounds__({{ block_size }})
{%- endif %}
void {{ name }}({{ varargs | join(', ') }}) {
    const {{ index_type }} block_base = (threadIdx.x + blockIdx.{{ axis }} * blockDim.{{ axis }} * {{ unroll_factor }}) * {{ vector_ctype_elements }};
    {%- if unroll_factor > 1 %}
    for ({{ index_type }} unroll = 0; unroll < {{ unroll_factor }}; ++unroll) {
        const {{ index_type }} vector_base = block_base + unroll * blockDim.{{ axis }} * {{ vector_ctype_elements }};
    {%- else %}
    {
        const {{ index_type }} vector_base = block_base;
    {%- endif %}

        {%- if vector_size > 1 and not explicit_vectorization %}
        for ({{ index_type }} v = 0; v < {{ vector_size }}; ++v) {
            const {{ index_type }} i = vector_base + v;
            {{ caller() }}
        }
        {%- else %}
        const {{ index_type }} i = vector_base;
        {{ caller() }}
        {%- endif %}
    }
}
{%- endmacro %}

{%- macro load(access) %}
{%- if streaming_loads -%}
    __builtin_nontemporal_load(&{{ access }})
{%- else -%}
    {{ access }}
{%- endif -%}
{%- endmacro %}

{%- macro store(access, value) %}
{%- if streaming_stores -%}
    __builtin_nontemporal_store({{ value }}, &{{ access }})
{%- else -%}
    {{ access }} = {{ value }}
{%- endif -%}
{%- endmacro %}

{% call kernel('init',
               ctype_vec + '*__restrict__ a',
               ctype_vec + '*__restrict__ b',
               ctype_vec + '*__restrict__ c') %}
    {%- if vector_size > 1 and explicit_vectorization %}
        {{ store('a[i]', 'make_' +  ctype_vec + '(' + (['1'] * vector_size) | join(', ') + ')') }};
        {{ store('b[i]', 'make_' +  ctype_vec + '(' + (['2'] * vector_size) | join(', ') + ')') }};
        {{ store('c[i]', 'make_' +  ctype_vec + '(' + (['0'] * vector_size) | join(', ') + ')') }};
    {%- else %}
        {{ store('a[i]', '1') }};
        {{ store('b[i]', '2') }};
        {{ store('c[i]', '0') }};
    {%- endif %}
{% endcall %}

{% call kernel('copy',
               ctype_vec + '*__restrict__ c',
               'const ' + ctype_vec + '* __restrict__ a') %}
    {{ store('c[i]', load('a[i]')) }};
{% endcall %}

{% call kernel('scale',
               ctype_vec + '*__restrict__ b',
               'const ' + ctype + ' scalar',
               'const ' + ctype_vec + '* __restrict__ c') %}
    {{ store('b[i]', 'scalar * ' + load('c[i]')) }};
{% endcall %}

{% call kernel('add',
               ctype_vec + '*__restrict__ c',
               'const ' + ctype_vec + '* __restrict__ a',
               'const ' + ctype_vec + '* __restrict__ b') %}
    {{ store('c[i]', load('a[i]') + ' + ' + load('b[i]')) }};
{% endcall %}

{% call kernel('triad',
               ctype_vec + '*__restrict__ a',
               'const ' + ctype_vec + '* __restrict__ b',
               'const ' + ctype + ' scalar',
               'const ' + ctype_vec + '* __restrict__ c') %}
    {{ store('a[i]', load('b[i]') + ' + scalar * ' + load('c[i]')) }};
{% endcall %}

bool check_results({{ ctype }}* a,
                   {{ ctype }}* b,
                   {{ ctype }}* c);

extern "C" int run() {
    {{ ctype }} *a, *b, *c;
    CHECK(Malloc(&a, sizeof({{ ctype }}) * {{ array_size }}));
    CHECK(Malloc(&b, sizeof({{ ctype }}) * {{ array_size }}));
    CHECK(Malloc(&c, sizeof({{ ctype }}) * {{ array_size }}));

    {%- set grid_size = (array_size // (vector_size * unroll_factor) + block_size - 1) // block_size %}

    dim3 grid_size({{ grid_size if axis == 'x' else 1 }},
                   {{ grid_size if axis == 'y' else 1 }},
                   {{ grid_size if axis == 'z' else 1 }});
    dim3 block_size({{ block_size if axis == 'x' else 1 }},
                    {{ block_size if axis == 'y' else 1 }},
                    {{ block_size if axis == 'z' else 1 }});

    init<<<grid_size, block_size>>>(({{ ctype_vec }}*)a,
                                    ({{ ctype_vec }}*)b,
                                    ({{ ctype_vec }}*)c);
    CHECK(GetLastError());
    CHECK(DeviceSynchronize());

    {{ ctype }} scalar = 3;

    GPU(Event_t) start, stop;
    CHECK(EventCreate(&start));
    CHECK(EventCreate(&stop));

    double times[4][{{ ntimes }}];

    for (int k = 0; k < {{ ntimes }}; ++k) {
        float ftime;

        CHECK(EventRecord(start));
        copy<<<grid_size, block_size>>>(({{ ctype_vec }}*)c, ({{ ctype_vec }}*)a);
        CHECK(GetLastError());
        CHECK(EventRecord(stop));
        CHECK(EventSynchronize(stop));
        CHECK(EventElapsedTime(&ftime, start, stop));
        times[0][k] = double(ftime) / 1000.0;

        CHECK(EventRecord(start));
        scale<<<grid_size, block_size>>>(({{ ctype_vec }}*)b, scalar, ({{ ctype_vec }}*)c);
        CHECK(GetLastError());
        CHECK(EventRecord(stop));
        CHECK(EventSynchronize(stop));
        CHECK(EventElapsedTime(&ftime, start, stop));
        times[1][k] = double(ftime) / 1000.0;

        CHECK(EventRecord(start));
        add<<<grid_size, block_size>>>(({{ ctype_vec }}*)c, ({{ ctype_vec }}*)a, ({{ ctype_vec }}*)b);
        CHECK(GetLastError());
        CHECK(EventRecord(stop));
        CHECK(EventSynchronize(stop));
        CHECK(EventElapsedTime(&ftime, start, stop));
        times[2][k] = double(ftime) / 1000.0;

        CHECK(EventRecord(start));
        triad<<<grid_size, block_size>>>(({{ ctype_vec }}*)a, ({{ ctype_vec }}*)b, scalar, ({{ ctype_vec }}*)c);
        CHECK(GetLastError());
        CHECK(EventRecord(stop));
        CHECK(EventSynchronize(stop));
        CHECK(EventElapsedTime(&ftime, start, stop));
        times[3][k] = double(ftime) / 1000.0;
    }

    double avgtime[4] = {0};
    double mintime[4] = {std::numeric_limits<double>::max(),
                         std::numeric_limits<double>::max(),
                         std::numeric_limits<double>::max(),
                         std::numeric_limits<double>::max()};
    double maxtime[4] = {0};
    for (int k = 1; k < {{ ntimes }}; ++k) {
        for (int j = 0; j < 4; ++j) {
            avgtime[j] += times[j][k];
            mintime[j] = std::min(mintime[j], times[j][k]);
            maxtime[j] = std::max(maxtime[j], times[j][k]);
        }
    }

    const char* label[4] = {"Copy:      ",
                            "Scale:     ",
                            "Add:       ",
                            "Triad:     "};
    std::size_t bytes[4] = {sizeof({{ ctype }}) * {{ array_size * 2 }}ull,
                            sizeof({{ ctype }}) * {{ array_size * 2 }}ull,
                            sizeof({{ ctype }}) * {{ array_size * 3 }}ull,
                            sizeof({{ ctype }}) * {{ array_size * 3 }}ull};
    std::printf("Function    Best Rate MB/s  Avg time     Min time     Max time\n");
    for (int j = 0; j < 4; ++j) {
        avgtime[j] = avgtime[j] / {{ ntimes - 1 }};

        std::printf("%s%12.1f  %11.6f  %11.6f  %11.6f\n",
                    label[j],
                    1.0E-06 * bytes[j] / mintime[j],
                    avgtime[j],
                    mintime[j],
                    maxtime[j]);
    }
    std::cout << std::flush;

{%- if verify %}
    bool verifies = check_results(a, b, c);
{%- else %}
    bool verifies = true;
{%- endif %}
    CHECK(Free(a));
    CHECK(Free(b));
    CHECK(Free(c));
    return !verifies;
}

bool check_array(std::string const& name, {{ ctype }}* a, {{ ctype }} expected) {
    {%- if ctype in ['float', 'double', 'long double'] -%}
    if (std::isinf(expected)) {
        std::cerr << "expected value is infinite, ntimes too large for verication" << std::endl;
        return false;
    }
    {%- endif %}

    std::vector<{{ ctype }}> ah({{ array_size }});
    CHECK(Memcpy(ah.data(), a, {{ array_size }} * sizeof({{ ctype }}), GPU(MemcpyDeviceToHost)));

    {{ ctype }} sum_err = 0;
#pragma omp parallel for reduction(+: sum_err)
    for (std::size_t j = 0 ; j < {{ array_size }}; ++j)
        sum_err += std::abs(ah[j] - expected);
    {{ ctype }} avg_err = sum_err / {{ array_size }};

    const double epsilon = sizeof({{ ctype }}) == 4 ? 1e-6 : 1e-13;

    std::size_t ierr = 0;
    if (std::abs(avg_err / expected) > epsilon) {
        std::cerr << "failed validation on array " << name << "[]"
                  << std::endl
                  << "expected value: " << expected
                  << " avg. abs. error: " << avg_err
                  << " avg. rel. error: " << std::abs(avg_err / expected)
                  << std::endl;

        for (std::size_t j = 0; j < {{ array_size }}; ++j) {
            if (std::abs(ah[j] / expected - 1) > epsilon)
                ++ierr;
        }
        std::cerr << "for array " << name << "[], " << ierr
                  << " errors were found" << std::endl;
    }

    return ierr == 0;
}

bool check_results({{ ctype }}* a,
                   {{ ctype }}* b,
                   {{ ctype }}* c) {
    {{ ctype }} scalar = 3;
    {{ ctype }} aj = 1, bj = 2, cj = 0;

    for (int k = 0; k < {{ ntimes }}; ++k) {
        cj = aj;
        bj = scalar * cj;
        cj = aj + bj;
        aj = bj + scalar * cj;
    }

    return check_array("a", a, aj) &&
           check_array("b", b, bj) &&
           check_array("c", c, cj);
}
